// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String   @id @default(uuid())
  name           String
  email          String   @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
  friends        User[]   @relation("UserFriends")
  friendOf       User[]   @relation("UserFriends")
  player1Matches Match[]  @relation("Player1Matches")
  player2Matches Match[]  @relation("Player2Matches")
  winnerMatches  Match[]  @relation("WinnerMatches")
  isAdmin        Boolean  @default(false)
}

model Deck {
  id                   String   @id @default(uuid())
  name                 String
  desc                 String?
  shortDesc            String?
  image                String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @default(now())
  ruleSet              String?
  type                 String?
  cards                Card[]
  player1StartMatches  Match[]  @relation("Player1StartDeck")
  player2StartMatches  Match[]  @relation("Player2StartDeck")
  player1MarketMatches Match[]  @relation("Player1MarketDeck")
  player2MarketMatches Match[]  @relation("Player2MarketDeck")
}

model Card {
  id               String        @id @default(uuid())
  name             String
  type             String        @default("operator-1")
  variant          String        @default("operator-variant-1")
  attributes       String?
  targetAttributes String?
  targetType       String?
  targetVariants   String?
  desc             String?
  shortDesc        String?
  flavor           String?
  yen              Int?
  attack           Int?
  datab            Int?
  defense          Int?
  mw               Int?
  lag              Int?
  control          Int?
  costYen          Int?
  costDatab        Int?
  costMw           Int?
  costLag          Int?
  costControl      Int?
  turns            Int?
  logic            String?
  rarity           String?
  deckId           String?
  image            String?
  ruleSet          String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @default(now())
  deck             Deck?         @relation(fields: [deckId], references: [id], onDelete: Cascade)
  cardAbilities    CardAbility[]
}

model Ability {
  id               String   @id @default(uuid())
  name             String
  shortDesc        String?
  type             String
  image            String?
  ruleSet          String?
  targetAttributes String?
  targetType       String?
  targetVariants   String?
  desc             String?
  attack           Int?
  defense          Int?
  yen              Int?
  lag              Int?
  datab            Int?
  mw               Int?
  control          Int?
  cardCount        Int?
  turns            Int?
  engages          Int?
  logic            String?
  costYen          Int?
  costControl      Int?
  costDatab        Int?
  costMw           Int?
  costLag          Int?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now())
}

model AbilityInstance {
  id               String        @id @default(uuid())
  abilityId        String
  targetType       String?
  desc             String?
  attack           Int?
  defense          Int?
  yen              Int?
  lag              Int?
  datab            Int?
  mw               Int?
  control          Int?
  cardCount        Int?
  turns            Int?
  engages          Int?
  logic            String?
  costYen          Int?
  costControl      Int?
  costDatab        Int?
  costMw           Int?
  costLag          Int?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @default(now())
  cardAbilities    CardAbility[]
}

model CardAbility {
  id              String          @id @default(uuid())
  cardId          String
  abilityId       String
  card            Card            @relation(fields: [cardId], references: [id], onDelete: Cascade)
  abilityInstance AbilityInstance @relation(fields: [abilityId], references: [id], onDelete: Cascade)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @default(now())
}

model Match {
  id                  String    @id @default(uuid())
  player1Id           String?
  player2Id           String?
  player1StartDeckId  String?
  player2StartDeckId  String?
  player1MarketDeckId String?
  player2MarketDeckId String?
  gameMode            String?
  gameType            String?
  statuses            String
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @default(now())
  winnerId            String?
  rounds              Int?
  matchState          Json?
  startedAt           DateTime?
  endedAt             DateTime?
  ruleSet             String?

  player1           User? @relation("Player1Matches", fields: [player1Id], references: [id])
  player2           User? @relation("Player2Matches", fields: [player2Id], references: [id])
  player1StartDeck  Deck? @relation("Player1StartDeck", fields: [player1StartDeckId], references: [id])
  player2StartDeck  Deck? @relation("Player2StartDeck", fields: [player2StartDeckId], references: [id])
  player1MarketDeck Deck? @relation("Player1MarketDeck", fields: [player1MarketDeckId], references: [id])
  player2MarketDeck Deck? @relation("Player2MarketDeck", fields: [player2MarketDeckId], references: [id])
  winner            User? @relation("WinnerMatches", fields: [winnerId], references: [id])

  @@index([id])
}
